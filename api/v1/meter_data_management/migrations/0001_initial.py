# Generated by Django 3.0.11 on 2021-03-17 03:06

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid
import v1.meter_data_management.models.meter
import v1.meter_data_management.models.meter_reading


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('utility', '__first__'),
        ('tenant', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ValidationAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('read_cycle_id', models.BigIntegerField(blank=True, null=True)),
                ('validator1_id', models.BigIntegerField(blank=True, null=True)),
                ('validator2_id', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='SmartMeterConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('vendor_name', models.CharField(blank=True, max_length=200, null=True)),
                ('smart_meter_api_name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('api_url', models.CharField(blank=True, max_length=200, null=True)),
                ('api_key', models.CharField(blank=True, max_length=200, null=True)),
                ('request_parameter', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('schedule_id', models.BigIntegerField()),
                ('read_cycle_id', models.BigIntegerField()),
                ('activity_type_id', models.BigIntegerField()),
                ('recurring_id', models.BigIntegerField(blank=True, null=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('schedule_log_status', models.IntegerField(choices=[(0, 'PENDING'), (1, 'COMPLETED'), (2, 'INPROGRESS')], default=0)),
                ('date_and_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('read_cycle_id', models.BigIntegerField()),
                ('activity_type_id', models.BigIntegerField()),
                ('frequency_id', models.BigIntegerField(blank=True, null=True)),
                ('repeat_every_id', models.BigIntegerField(blank=True, null=True)),
                ('recurring_id', models.BigIntegerField(blank=True, null=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('occurs_on', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('cron_expression', models.CharField(blank=True, max_length=500, null=True)),
                ('schedule_status', models.IntegerField(choices=[(0, 'PENDING'), (1, 'COMPLETED'), (2, 'INPROGRESS')], default=0)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='RouteTaskAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('read_cycle_id', models.BigIntegerField(blank=True, null=True)),
                ('route_id', models.BigIntegerField()),
                ('meter_reader_id', models.BigIntegerField(blank=True, null=True)),
                ('schedule_log_id', models.BigIntegerField(blank=True, null=True)),
                ('consumer_meter_json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('dispatch_status', models.IntegerField(choices=[(0, 'NOT-DISPATCHED'), (1, 'IN-PROGRESS'), (2, 'STARTED'), (3, 'DISPATCHED'), (4, 'PARTIAL'), (5, 'ASSIGN-FAIL'), (6, 'DE-ASSIGN-FAIL'), (7, 'COMPLETED')], default=0)),
                ('assign_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('premises_json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('filter_json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='ReaderStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('meter_status_id', models.BigIntegerField()),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('status_code', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='ReadCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('city_id', models.BigIntegerField()),
                ('zone_id', models.BigIntegerField()),
                ('division_id', models.BigIntegerField()),
                ('area_id', models.BigIntegerField()),
                ('subarea_id', models.BigIntegerField()),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('route_json', django.contrib.postgres.fields.jsonb.JSONField(default='')),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='MeterReading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('consumer_detail_id', models.BigIntegerField(blank=True, null=True)),
                ('read_cycle_id', models.BigIntegerField(blank=True, null=True)),
                ('route_id', models.BigIntegerField(blank=True, null=True)),
                ('route_task_assignment_id', models.BigIntegerField(blank=True, null=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('schedule_log_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_reader_id', models.BigIntegerField(blank=True, null=True)),
                ('validator_one_id', models.BigIntegerField(blank=True, null=True)),
                ('validator_two_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_status_id', models.BigIntegerField(blank=True, null=True)),
                ('reader_status_id', models.BigIntegerField(blank=True, null=True)),
                ('reading_status', models.IntegerField(choices=[(0, 'VALIDATION-ONE'), (1, 'VALIDATION-TWO'), (2, 'COMPLETED'), (3, 'REVISIT')], default=0)),
                ('meter_image', models.FileField(blank=True, null=True, upload_to=v1.meter_data_management.models.meter_reading.get_file_path)),
                ('consumer_no', models.CharField(blank=True, max_length=200, null=True)),
                ('meter_no', models.CharField(blank=True, max_length=200, null=True)),
                ('current_meter_reading', models.CharField(blank=True, max_length=200, null=True)),
                ('current_meter_reading_v1', models.CharField(blank=True, max_length=200, null=True)),
                ('current_meter_reading_v2', models.CharField(blank=True, max_length=200, null=True)),
                ('meter_reading_json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('additional_parameter_json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('is_assign_to_v1', models.BooleanField(default=False)),
                ('is_assign_to_v2', models.BooleanField(default=False)),
                ('is_meter_matching', models.BooleanField(default=False)),
                ('is_reading_matching', models.BooleanField(default=False)),
                ('is_validated', models.BooleanField(default=False)),
                ('is_duplicate', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='MeterMake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('route_id', models.BigIntegerField(blank=True, null=True)),
                ('state_id', models.BigIntegerField(blank=True, null=True)),
                ('city_id', models.BigIntegerField(blank=True, null=True)),
                ('area_id', models.BigIntegerField(blank=True, null=True)),
                ('sub_area_id', models.BigIntegerField(blank=True, null=True)),
                ('premise_id', models.BigIntegerField(blank=True, null=True)),
                ('category_id', models.BigIntegerField(blank=True, null=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_type_id', models.BigIntegerField(blank=True, null=True)),
                ('smart_meter_source_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_make_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_status', models.IntegerField(choices=[(0, 'NORMAL'), (1, 'FAULTY'), (2, 'RCNT')], default=0)),
                ('reader_status', models.IntegerField(choices=[(0, 'OK'), (1, 'CURRENT LESS THAN PREVIOUS'), (2, 'METER CHANGED'), (3, 'ROUND COMPLETE'), (4, 'METER BRUNT'), (5, 'GLASS BROKEN'), (6, 'METER DEAD'), (7, 'METER MISSING'), (8, 'NO DISPLAY'), (9, 'SITE NOT FOUND'), (10, 'OBSTACLE')], default=0)),
                ('street', models.CharField(blank=True, max_length=200, null=True)),
                ('zipcode', models.CharField(blank=True, max_length=200, null=True)),
                ('meter_no', models.CharField(max_length=200)),
                ('meter_digit', models.BigIntegerField(blank=True, null=True)),
                ('meter_image', models.FileField(blank=True, null=True, upload_to=v1.meter_data_management.models.meter.get_file_path)),
                ('address_line_1', models.CharField(blank=True, max_length=200, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=200, null=True)),
                ('current_reading', models.CharField(blank=True, max_length=200, null=True)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('install_date', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='JobCardTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('task_name', models.CharField(blank=True, max_length=200, null=True)),
                ('meter_read_json_obj', django.contrib.postgres.fields.jsonb.JSONField()),
                ('additional_parameter_json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
        migrations.CreateModel(
            name='ConsumerDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_string', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('consumer_id', models.BigIntegerField(blank=True, null=True)),
                ('meter_id', models.BigIntegerField(blank=True, null=True)),
                ('schedule_log_id', models.BigIntegerField(blank=True, null=True)),
                ('read_cycle_id', models.BigIntegerField(blank=True, null=True)),
                ('route_id', models.BigIntegerField(blank=True, null=True)),
                ('premise_id', models.BigIntegerField(blank=True, null=True)),
                ('activity_type_id', models.BigIntegerField(blank=True, null=True)),
                ('utility_product_id', models.BigIntegerField(blank=True, null=True)),
                ('consumer_no', models.CharField(blank=True, max_length=200, null=True)),
                ('meter_no', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.BigIntegerField(blank=True, null=True)),
                ('updated_by', models.BigIntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant.TenantMaster')),
                ('utility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='utility.UtilityMaster')),
            ],
        ),
    ]
